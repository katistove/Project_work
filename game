import random
import math
from database import save_record, get_top_records


class Tower:
    def __init__(self, x, y):
        self.x = x
        self.y = y
        self.range = 3
        self.damage = 15
        self.cooldown = 1
        self.last_shot = 0
        self.level = 1
        self.upgrade_cost = 50

    def upgrade(self):
        self.level += 1
        self.damage += 10
        self.range += 0.5
        self.upgrade_cost += 30
        return self.upgrade_cost

    def can_shoot(self, current_time):
        return current_time - self.last_shot >= self.cooldown

    def distance_to(self, enemy):
        return math.sqrt((self.x - enemy.x) ** 2 + (self.y - enemy.y) ** 2)


class Enemy:
    def __init__(self, wave):
        self.x = 0
        self.y = random.randint(1, 9)
        self.speed = 0.5 + wave * 0.02
        self.health = 50 + wave * 10
        self.max_health = self.health
        self.reward = 10 + wave * 2
        self.alive = True

    def move(self):
        self.x += self.speed
        return self.x < 10  # True –µ—Å–ª–∏ –≤—Ä–∞–≥ –µ—â—ë –Ω–∞ –ø–æ–ª–µ

    def take_damage(self, damage):
        self.health -= damage
        if self.health <= 0:
            self.alive = False
            return self.reward
        return 0


class Game:
    def __init__(self):
        self.player_name = ""
        self.wave = 0
        self.score = 0
        self.money = 100
        self.lives = 10
        self.towers = []
        self.enemies = []
        self.game_time = 0
        self.game_over = False

    def start_wave(self):
        self.wave += 1
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–∞–≥–æ–≤ –¥–ª—è —Ç–µ–∫—É—â–µ–π –≤–æ–ª–Ω—ã
        enemy_count = 5 + self.wave * 2
        for _ in range(enemy_count):
            self.enemies.append(Enemy(self.wave))

    def place_tower(self, x, y):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ –¥–µ–Ω–µ–≥
        if self.money < 50:
            print("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥! –ù—É–∂–Ω–æ 50 –º–æ–Ω–µ—Ç.")
            return False

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–∂–Ω–æ –ª–∏ –ø–æ—Å—Ç–∞–≤–∏—Ç—å –±–∞—à–Ω—é
        if x < 1 or x > 9 or y < 1 or y > 9:
            print("–ù–µ–ª—å–∑—è —Å—Ç–∞–≤–∏—Ç—å –±–∞—à–Ω—é –∑–∞ –ø—Ä–µ–¥–µ–ª–∞–º–∏ –ø–æ–ª—è!")
            return False

        for tower in self.towers:
            if tower.x == x and tower.y == y:
                print("–ó–¥–µ—Å—å —É–∂–µ –µ—Å—Ç—å –±–∞—à–Ω—è!")
                return False

        # –°—Ç–∞–≤–∏–º –±–∞—à–Ω—é
        self.towers.append(Tower(x, y))
        self.money -= 50
        return True

    def upgrade_tower(self, index):
        if index < 0 or index >= len(self.towers):
            print("–ù–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å –±–∞—à–Ω–∏!")
            return False

        tower = self.towers[index]
        if self.money < tower.upgrade_cost:
            print(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥! –ù—É–∂–Ω–æ {tower.upgrade_cost} –º–æ–Ω–µ—Ç.")
            return False

        self.money -= tower.upgrade_cost
        return tower.upgrade()

    def update(self, delta_time):
        if self.game_over:
            return

        self.game_time += delta_time

        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–∞–≥–æ–≤
        for enemy in self.enemies[:]:
            if enemy.move():
                if not enemy.alive:
                    self.enemies.remove(enemy)
            else:
                # –í—Ä–∞–≥ –¥–æ—à–µ–ª –¥–æ –∫–æ–Ω—Ü–∞
                self.lives -= 1
                self.enemies.remove(enemy)
                if self.lives <= 0:
                    self.game_over = True
                    print("–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞! –í–∞—à–∞ –±–∞–∑–∞ —Ä–∞–∑—Ä—É—à–µ–Ω–∞.")
                    return

        # –°—Ç—Ä–µ–ª—å–±–∞ –±–∞—à–µ–Ω
        for tower in self.towers:
            if tower.can_shoot(self.game_time):
                # –ò—â–µ–º –±–ª–∏–∂–∞–π—à–µ–≥–æ –≤—Ä–∞–≥–∞ –≤ —Ä–∞–¥–∏—É—Å–µ
                target = None
                min_distance = tower.range + 1

                for enemy in self.enemies:
                    distance = tower.distance_to(enemy)
                    if distance <= tower.range and distance < min_distance:
                        target = enemy
                        min_distance = distance

                # –°—Ç—Ä–µ–ª—è–µ–º –ø–æ –≤—Ä–∞–≥—É
                if target:
                    reward = target.take_damage(tower.damage)
                    if reward > 0:
                        self.money += reward
                        self.score += reward
                    tower.last_shot = self.game_time

        # –ï—Å–ª–∏ –≤–æ–ª–Ω–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å, –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é
        if not self.enemies:
            self.money += 20 + self.wave * 5
            self.score += 50
            self.start_wave()

    def draw_map(self):
        print("\n" + "=" * 30)
        print(f"–í–æ–ª–Ω–∞: {self.wave} | –ñ–∏–∑–Ω–∏: {self.lives} | –î–µ–Ω—å–≥–∏: {self.money} | –û—á–∫–∏: {self.score}")
        print("=" * 30)

        # –†–∏—Å—É–µ–º –∏–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ 10x10
        for y in range(10):
            for x in range(10):
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞—à–Ω–∏
                is_tower = False
                for i, tower in enumerate(self.towers):
                    if int(tower.x) == x and int(tower.y) == y:
                        print("T", end=" ")
                        is_tower = True
                        break

                if is_tower:
                    continue

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–∞–≥–æ–≤
                is_enemy = False
                for enemy in self.enemies:
                    if int(enemy.x) == x and int(enemy.y) == y:
                        health_percent = enemy.health / enemy.max_health
                        if health_percent > 0.7:
                            print("E", end=" ")
                        elif health_percent > 0.3:
                            print("e", end=" ")
                        else:
                            print("w", end=" ")
                        is_enemy = True
                        break

                if is_enemy:
                    continue

                # –ü—É—Å—Ç–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ
                if x == 0 or x == 9 or y == 0 or y == 9:
                    print("#", end=" ")  # –ì—Ä–∞–Ω–∏—Ü–∞
                else:
                    print(".", end=" ")  # –ü—É—Å—Ç–æ–µ –ø–æ–ª–µ

            print()  # –ù–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞

    def show_towers(self):
        print("\n–í–∞—à–∏ –±–∞—à–Ω–∏:")
        for i, tower in enumerate(self.towers):
            print(f"{i + 1}. –ü–æ–∑–∏—Ü–∏—è: ({tower.x}, {tower.y}) | –£—Ä–æ–≤–µ–Ω—å: {tower.level} | "
                  f"–£—Ä–æ–Ω: {tower.damage} | –†–∞–¥–∏—É—Å: {tower.range:.1f} | "
                  f"–ê–ø–≥—Ä–µ–π–¥: {tower.upgrade_cost} –º–æ–Ω–µ—Ç")

    def show_leaderboard(self):
        records = get_top_records()
        if not records:
            print("\n–ï—â—ë –Ω–µ—Ç —Ä–µ–∫–æ—Ä–¥–æ–≤!")
            return

        print("\nüèÜ –¢–û–ü-10 –ò–ì–†–û–ö–û–í üèÜ")
        print("=" * 50)
        print(f"{'–ò–º—è':<15} {'–í–æ–ª–Ω–∞':<6} {'–û—á–∫–∏':<10} {'–î–∞—Ç–∞':<20}")
        print("-" * 50)
        for record in records:
            name, wave, score, timestamp = record
            date = timestamp.split()[0]  # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –¥–∞—Ç—É
            print(f"{name:<15} {wave:<6} {score:<10} {date:<20}")


def main():
    game = Game()
    game.player_name = input("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è: ").strip() or "–ò–≥—Ä–æ–∫"

    print("\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Tower Defence!")
    print("–¶–µ–ª—å: –∑–∞—â–∏—Ç–∏—Ç—å –ø—Ä–∞–≤—É—é —Å—Ç–æ—Ä–æ–Ω—É –∫–∞—Ä—Ç—ã –æ—Ç –≤—Ä–∞–≥–æ–≤")
    print("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:")
    print("1. –ü–æ—Å—Ç–∞–≤–∏—Ç—å –±–∞—à–Ω—é")
    print("2. –£–ª—É—á—à–∏—Ç—å –±–∞—à–Ω—é")
    print("3. –ü–æ–∫–∞–∑–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É –ª–∏–¥–µ—Ä–æ–≤")
    print("4. –ó–∞–≤–µ—Ä—à–∏—Ç—å –∏–≥—Ä—É")

    # –ù–∞—á–∏–Ω–∞–µ–º –ø–µ—Ä–≤—É—é –≤–æ–ª–Ω—É
    game.start_wave()

    # –ò–≥—Ä–æ–≤–æ–π —Ü–∏–∫–ª
    while not game.game_over:
        game.draw_map()
        game.update(1)  # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã

        print("\n–î–µ–π—Å—Ç–≤–∏—è:")
        print("1. –ü–æ—Å—Ç–∞–≤–∏—Ç—å –±–∞—à–Ω—é (50 –º–æ–Ω–µ—Ç)")
        print("2. –£–ª—É—á—à–∏—Ç—å –±–∞—à–Ω—é")
        print("3. –ü–æ–∫–∞–∑–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É –ª–∏–¥–µ—Ä–æ–≤")
        print("4. –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ö–æ–¥")

        choice = input("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ")

        if choice == "1":
            try:
                x = int(input("–í–≤–µ–¥–∏—Ç–µ X –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—É (1-8): "))
                y = int(input("–í–≤–µ–¥–∏—Ç–µ Y –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—É (1-8): "))
                if game.place_tower(x, y):
                    print(f"–ë–∞—à–Ω—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –≤ –ø–æ–∑–∏—Ü–∏–∏ ({x}, {y})!")
            except ValueError:
                print("–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–∞.")

        elif choice == "2":
            game.show_towers()
            if game.towers:
                try:
                    index = int(input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –±–∞—à–Ω–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è: ")) - 1
                    cost = game.upgrade_tower(index)
                    if cost:
                        print(f"–ë–∞—à–Ω—è —É–ª—É—á—à–µ–Ω–∞ –¥–æ —É—Ä–æ–≤–Ω—è {game.towers[index].level}!")
                except ValueError:
                    print("–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
            else:
                print("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –±–∞—à–µ–Ω!")

        elif choice == "3":
            game.show_leaderboard()

        elif choice == "4":
            continue

        else:
            print("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if save_record(game.player_name, game.wave, game.score):
        print("\n–í–∞—à —Ä–µ–∫–æ—Ä–¥ —Å–æ—Ö—Ä–∞–Ω—ë–Ω!")
    else:
        print("\n–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∫–æ—Ä–¥.")

    game.show_leaderboard()
    print("\n–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–≥—Ä—É!")


if __name__ == "__main__":
    main()
